// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
)

const createScramble = `-- name: CreateScramble :one
INSERT INTO scrambles (user_id, time, scramble)
VALUES ($1, $2, $3)
RETURNING id, user_id, time, scramble, created_on, updated_on
`

type CreateScrambleParams struct {
	UserID   int64
	Time     int32
	Scramble string
}

func (q *Queries) CreateScramble(ctx context.Context, arg CreateScrambleParams) (Scramble, error) {
	row := q.db.QueryRowContext(ctx, createScramble, arg.UserID, arg.Time, arg.Scramble)
	var i Scramble
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Time,
		&i.Scramble,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES ($1, $2)
RETURNING id, username, password
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getScrambles = `-- name: GetScrambles :many
SELECT id, user_id, time, scramble, created_on, updated_on FROM scrambles
ORDER BY id
`

func (q *Queries) GetScrambles(ctx context.Context) ([]Scramble, error) {
	rows, err := q.db.QueryContext(ctx, getScrambles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scramble
	for rows.Next() {
		var i Scramble
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Time,
			&i.Scramble,
			&i.CreatedOn,
			&i.UpdatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScramblesByUser = `-- name: GetScramblesByUser :many
SELECT id, user_id, time, scramble, created_on, updated_on FROM scrambles
WHERE user_id = $1
`

func (q *Queries) GetScramblesByUser(ctx context.Context, userID int64) ([]Scramble, error) {
	rows, err := q.db.QueryContext(ctx, getScramblesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scramble
	for rows.Next() {
		var i Scramble
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Time,
			&i.Scramble,
			&i.CreatedOn,
			&i.UpdatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
